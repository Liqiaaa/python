from py2neo import Graph

class AnswerSearcher:
    def __init__(self):
        self.g = Graph('http://localhost:7474',auth=("neo4j", "12345678"),name='neo4j')
        self.num_limit = 20

    '''执行cypher查询，并返回相应结果'''
    def search_main(self, sqls):
        final_answers = []
        for sql_ in sqls:
            question_type = sql_['question_type']
            queries = sql_['sql']
            answers = []
            for query in queries:
                ress = self.g.run(query).data()
                answers += ress
            final_answer = self.answer_prettify(question_type, answers)
            if final_answer:
                final_answers.append(final_answer)
        return final_answers

    '''根据对应的qustion_type，调用相应的回复模板'''
    def answer_prettify(self, question_type, answers):
        final_answer = []
        if not answers:
            return ''
        if question_type == 'laoshi-project':
            p_ ={}
            for i in answers:
                if i['m.name'] not in p_:
                    p_[i['m.name']]=i['n.theme']
                else:
                    p_[i['m.name']]+=('、'+i['n.theme'])
                    #print('i=',i)
            for i in p_:
             final_answer = '{0}老师指导的项目包括：{1}'.format(i, p_[i])

        #if question_type == 'laoshi-project':
            #desc = [i['m.name'] for i in answers]
            #subject = answers[0]['m.name']
            #final_answer = '{0}老师指导的项目包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))

        elif question_type == 'project-rank':
            for i in answers:
             final_answer = '项目《{0}》获得的级别为：{1}'.format(i['n.theme'],i['b.rank'])

        elif question_type == 'project-laoshi':
            desc = [i['n.theme'] for i in answers]
            subject = answers[0]['n.theme']
            final_answer = '{0}项目的指导老师为：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))

        return final_answer


if __name__ == '__main__':
    searcher = AnswerSearcher()
