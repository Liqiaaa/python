class QuestionPaser:

    '''构建实体节点'''
    def build_entitydict(self, args):
        entity_dict = {}
        for arg, types in args.items():
            for type in types:
                if type not in entity_dict:
                    entity_dict[type] = [arg]
                else:
                    entity_dict[type].append(arg)

        return entity_dict

    '''解析主函数'''
    def parser_main(self, res_classify):
        args = res_classify['args']
        entity_dict = self.build_entitydict(args)
        question_types = res_classify['question_types']
        sqls = []
        for question_type in question_types:
            sql_ = {}
            sql_['question_type'] = question_type
            sql = []
            if question_type == 'laoshi-project':
                sql = self.sql_transfer(question_type, entity_dict.get('name'))

            elif question_type == 'project-rank':
                sql = self.sql_transfer(question_type, entity_dict.get('theme'))

            elif question_type == 'project-laoshi':
                sql = self.sql_transfer(question_type, entity_dict.get('theme'))

            if sql:
                sql_['sql'] = sql

                sqls.append(sql_)

        return sqls

    '''针对不同的问题，分开进行处理'''
    def sql_transfer(self, question_type, entities):
        if not entities:
            return []

        # 查询语句
        sql = []
        # 查询老师指导的项目
        if question_type == 'laoshi-project':
            sql = ["MATCH (m:name)-[r:老师指导过]->(n:theme) where m.name='{0}' return m.name,n.theme".format(i) for i in entities]
        # 查询项目的级别
        elif question_type == 'project-rank':
            sql = ["MATCH (n:theme)-[r:项目的级别为]->(b:rank) where n.theme = '{0}' return n.theme,b.rank".format(i) for i in entities]

        # 查询疾病的持续时间
        elif question_type == 'project-laoshi':
            sql = ["MATCH (n:theme) where n.theme = '{0}' return n.theme,n.name".format(i) for i in entities]

        return sql



if __name__ == '__main__':
    handler = QuestionPaser()
